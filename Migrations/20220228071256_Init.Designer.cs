// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using _4kTiles_Backend.Context;

#nullable disable

namespace _4kTiles_Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220228071256_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("_4kTiles_Backend.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("accountid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<string>("DeletedReason")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("deletedreason")
                        .HasDefaultValueSql("NULL::character varying");

                    b.Property<DateTime?>("Dob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dob")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("hashedpassword");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("AccountId");

                    b.ToTable("account");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.AccountRole", b =>
                {
                    b.Property<int>("ArId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("arid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ArId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("accountid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("ArId")
                        .HasName("accountrole_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("accountrole");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.AccountSong", b =>
                {
                    b.Property<int>("AsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("asid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AsId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("accountid");

                    b.Property<int>("BestScore")
                        .HasColumnType("integer")
                        .HasColumnName("bestscore");

                    b.Property<int>("SongId")
                        .HasColumnType("integer")
                        .HasColumnName("songid");

                    b.HasKey("AsId")
                        .HasName("accountsong_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("SongId");

                    b.ToTable("accountsong");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("genreid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("genrename");

                    b.HasKey("GenreId");

                    b.ToTable("genre");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rolename");

                    b.HasKey("RoleId");

                    b.ToTable("role");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.Song", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("songid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SongId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author");

                    b.Property<int>("Bpm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bpm")
                        .HasDefaultValueSql("100");

                    b.Property<string>("DeletedReason")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("deletedreason")
                        .HasDefaultValueSql("NULL::character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("ispublic");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<DateTime>("ReleaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("releasedate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("songname");

                    b.HasKey("SongId");

                    b.ToTable("song");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.SongGenre", b =>
                {
                    b.Property<int>("SgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sgid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SgId"));

                    b.Property<int>("GenreId")
                        .HasColumnType("integer")
                        .HasColumnName("genreid");

                    b.Property<int>("SongId")
                        .HasColumnType("integer")
                        .HasColumnName("songid");

                    b.HasKey("SgId")
                        .HasName("songgenre_pkey");

                    b.HasIndex("GenreId");

                    b.HasIndex("SongId");

                    b.ToTable("songgenre");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.SongReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reportid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("accountid");

                    b.Property<DateTime>("ReportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reportdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ReportReason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reportreason");

                    b.Property<bool?>("ReportStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("reportstatus");

                    b.Property<string>("ReportTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reporttitle");

                    b.Property<int>("SongId")
                        .HasColumnType("integer")
                        .HasColumnName("songid");

                    b.HasKey("ReportId")
                        .HasName("songreport_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("SongId");

                    b.ToTable("songreport");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.SongTag", b =>
                {
                    b.Property<int>("StId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("stid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StId"));

                    b.Property<int>("SongId")
                        .HasColumnType("integer")
                        .HasColumnName("songid");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tagid");

                    b.HasKey("StId")
                        .HasName("songtag_pkey");

                    b.HasIndex("SongId");

                    b.HasIndex("TagId");

                    b.ToTable("songtag");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tagid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<bool>("IsPublisherTag")
                        .HasColumnType("boolean")
                        .HasColumnName("ispublishertag");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tagname");

                    b.HasKey("TagId");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.AccountRole", b =>
                {
                    b.HasOne("_4kTiles_Backend.Entities.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("accountrole_accountid_fkey");

                    b.HasOne("_4kTiles_Backend.Entities.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("accountrole_roleid_fkey");

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.AccountSong", b =>
                {
                    b.HasOne("_4kTiles_Backend.Entities.Account", "Account")
                        .WithMany("AccountSongs")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("accountsong_accountid_fkey");

                    b.HasOne("_4kTiles_Backend.Entities.Song", "Song")
                        .WithMany("AccountSongs")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("accountsong_songid_fkey");

                    b.Navigation("Account");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.SongGenre", b =>
                {
                    b.HasOne("_4kTiles_Backend.Entities.Genre", "Genre")
                        .WithMany("SongGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("songgenre_genreid_fkey");

                    b.HasOne("_4kTiles_Backend.Entities.Song", "Song")
                        .WithMany("SongGenres")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("songgenre_songid_fkey");

                    b.Navigation("Genre");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.SongReport", b =>
                {
                    b.HasOne("_4kTiles_Backend.Entities.Account", "Account")
                        .WithMany("SongReports")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("songreport_accountid_fkey");

                    b.HasOne("_4kTiles_Backend.Entities.Song", "Song")
                        .WithMany("SongReports")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("songreport_songid_fkey");

                    b.Navigation("Account");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.SongTag", b =>
                {
                    b.HasOne("_4kTiles_Backend.Entities.Song", "Song")
                        .WithMany("SongTags")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("songtag_songid_fkey");

                    b.HasOne("_4kTiles_Backend.Entities.Tag", "Tag")
                        .WithMany("SongTags")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("songtag_tagid_fkey");

                    b.Navigation("Song");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.Account", b =>
                {
                    b.Navigation("AccountRoles");

                    b.Navigation("AccountSongs");

                    b.Navigation("SongReports");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.Genre", b =>
                {
                    b.Navigation("SongGenres");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.Role", b =>
                {
                    b.Navigation("AccountRoles");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.Song", b =>
                {
                    b.Navigation("AccountSongs");

                    b.Navigation("SongGenres");

                    b.Navigation("SongReports");

                    b.Navigation("SongTags");
                });

            modelBuilder.Entity("_4kTiles_Backend.Entities.Tag", b =>
                {
                    b.Navigation("SongTags");
                });
#pragma warning restore 612, 618
        }
    }
}
